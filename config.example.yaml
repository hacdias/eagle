# Enables development model. That entails:
# - Request logging.
# - Template loading every request.
# - No git commit on save.
development: false
# The location of the Hugo's source.
sourceDirectory: /app/source
# The directory where the public files will be stored.
publicDirectory: /app/public
# The directory where Eagle will store some data.
dataDirectory: /app/data
# The port to listen on.
port: 8080
# The base URL from which the website is served.
baseUrl: "http://localhost:8080"
# The secret to protect JWT tokens.
tokensSecret: SecureSecret
# Optional GitHub (https://docs.github.com/) webhook secret to update the source repository.
webhookSecret: GitHub
# The website language.
language: en
# The website title.
title: "The Website Title"

# Login user configuration.
login:
  # The login username.
  username: johndoe
  # Encrypted password. Use 'eagle pwd' to generate the password.
  password: invalidSecret

# Webmentions configuration.
webmentions:
  # Webmention.io (https://webmention.io) secret for incoming webmentions.
  secret: MySecret

# Notifications configuration.
notifications:
  # Telegram (https://core.telegram.org) credentials for notifications.
  telegram:
    token: TelegramToken
    chatId: TelegramChat

# Optional BunnyCDN (https://bunny.net) credentials used for the media upload.
bunnycdn:
  zone: someBunnyZone
  key: someBunnySecret
  base: someBunnyBase

# Optional Meilisearch (https://www.meilisearch.com/) endpoint for search.
meilisearch:
  endpoint: myUrl
  key: myKey

# Optional ImgProxy (https://imgproxy.net/) integration for image resizing.
# Sizes are hardcoded for now.
imgproxy:
  # Temporary directory shared between Eagle and ImgProxy
  directory:
  # ImgProxy endpoint
  endpoint:

plugins:
  # Optional Miniflux (https://miniflux.app) integration for blogroll data generation.
  # Runs every day automatically, can be triggered through dashboard.
  miniflux:
    endpoint: myUrl
    key: myKey
    filename: data/feeds.json
    opml: data/feeds.opml # optional

  # Optional Linkding (https://github.com/sissbruecker/linkding) integration for bookmarks.
  # Runs every day automatically, can be triggered through dashboard.
  linkding:
    endpoint: myUrl
    key: myKey
    filename: data/bookmarks.json

  # Optional plugin to serve /.well-known/links, as well as save a data file with them.
  # Runs every day automatically, can be triggered through dashboard.
  external-links:
    filename: "data/external-links.json"
    ignored: ['domain.com', 'example.com']
